-- Quartus II VHDL Template
-- Four-State Moore State Machine

-- A Moore machine's outputs are dependent only on the current state.
-- The output is written only when the state changes.  (State
-- transitions are synchronous.)

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity lights is

	port(
		clk		 : in	std_logic;
		reset	 	 : in	std_logic;
		lights	 : out std_logic_vector(7 downto 0);
		IRView	 : out std_logic_vector(2 downto 0);
		PCView	 : out std_logic_vector(3 downto 0)
	);

end entity;

architecture rtl of lights is

	signal IR	: std_logic_vector(2 downto 0);
	signal PC	: unsigned(3 downto 0);
	signal LR	: unsigned(7 downto 0);
	signal ROMvalue	: std_logic_vector(2 downto 0);

	-- Build an enumerated type for the state machine
	type state_type is (sFetch, sExecute);

	-- Register to hold the current state
	signal state   : state_type;
	
component lightrom
    addr  : in std_logic_vector(3 downto 0);
	 data	: out std_logic_vector(2 downto 0)
end component;

begin

	-- Logic to advance to the next state
	process (clk, reset)
	begin
		if reset = '0' then
			state <= sFetch;
			PC <= (others=>'0');
			IR <= (others=>'0');
			LR <= (others=>'0');
		elsif (rising_edge(clk)) then
			case state is
				when sFetch=>
					IR <= ROMvalue;
					PC <= PC + 1;
					state <= sExecute
				when sExecute=>
					case IR is
						when "000" =>
							LR <= (others=>'0');
							state <= sFetch;
						when "001" =>
							LR <= LR srl 1;
							state <= sFetch;
						when "010" =>
							LR <= LS sll 1;
							state <= sFetch;
						when "011" =>
							LR <= LR + 1;
							state <= sFetch;
						when "100" =>
							LR <= LR - 1;
							state <= sFetch;
						when "101" =>
							LR <= not LR;
							state <= sFetch;
						when "111" =>
							LR <= LR rol 1;
							state <= sFetch;
					end case;
			end case;
		end if;
	end process;

	-- Output depends solely on the current state
	process (state)
	begin
		case state is
			when s0 =>
				output <= "00";
			when s1 =>
				output <= "01";
			when s2 =>
				output <= "10";
			when s3 =>
				output <= "11";
		end case;
	end process;
	
	lights <= std_logic_vector(LR);
	IRView <= IR;
end rtl;