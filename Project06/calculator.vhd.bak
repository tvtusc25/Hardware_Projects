-- Quartus II VHDL Template
-- Four-State Moore State Machine

-- A Moore machine's outputs are dependent only on the current state.
-- The output is written only when the state changes.  (State
-- transitions are synchronous.)

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity calculator is

	port(
		clock		 : in	std_logic;
		reset	 	 : in	std_logic;
		b2			 : in std_logic;
		b3			 : in std_logic;
		b4			 : in std_logic;
		op			 : in std_logic(1 downto 0);
		data		 : in std_logic(7 downto 0);
		digit0	 : out std_logic(6 downto 0);
		digit1	 : out std_logic(6 downto 0);
		stackview : out std_logic(3 downto 0)
	);

end entity;

architecture rtl of calculator is

	signal RAM_input	: std_logic_vector(7 downto 0);
	signal RAM_output : std_logic_vector(7 downto 0);
	signal RAM_we		: std_logic;
	signal stack_ptr  : unsigned(3 downto 0);
	signal mbr			: std_logic_vector(7 downto 0);
	signal state   	: std_logic_vector(2 downto 0);
		
component memram
    port (
		address		: IN STD_LOGIC_VECTOR (3 DOWNTO 0);
		clock			: IN STD_LOGIC  := '1';
		data			: IN STD_LOGIC_VECTOR (7 DOWNTO 0);
		wren			: IN STD_LOGIC ;
		q				: OUT STD_LOGIC_VECTOR (7 DOWNTO 0)
	 );
end component;

begin

	memram1 : memram
	port map(
		address => stack_ptr,
		clock => clock,
		data => RAM_input,
		wren => RAM_we,
		q => RAM_output
	);
	
	RAM_output => mbr;
	stack_view => stack_ptr;
	
	-- Logic to advance to the next state
	process (clk, reset)
	begin
		if reset = '0' then
			state <= "000";
			stack_ptr <= (others=>'0');
			mbr <= (others=>'0');
			RAM_input <= (others=>'0');
			RAM_we <= (others=>'0');
		elsif (rising_edge(clk)) then
			case state is
				when "000"=>
					if b2 <= '1' then
						data <= mbr;
						state <= "111";
					end if;
					if b3 <= '1' then
						RAM_input <= mbr;
						RAM_we <= '1';
						state <= "001";
					end if;
					if b4 <= '1' then 
						if stack_ptr /= 0 then
							stack_ptr <= stack_ptr - 1;
							state <= "100";
						end if;
					end if;
				when "001"=>
				when
			end case;

lights <= std_logic_vector(LR);
IRView <= IR;
	
end rtl;